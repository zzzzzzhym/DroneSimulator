from typing import Tuple
import numpy as np

class Polynomial:
    '''
    Args:
        given a_0*b_0x**c_0 + a_1*b_1x**c_1 +...+ a_n*b_n*x**c_n
        original_coeff: [a_0, a_1, ..., a_n] representing a_0 + a_1*x +...+ a_n*x**n, the coefficients of the original polynomial
        number_of_terms: n, the number of terms of the original polynomial
        order: [c_0, c_1, ..., c_n] the post-differentiation/integration order corresponding to original terms 
        induced_coeff: [b_0, b_1, ..., b_n] coefficients generated by differentiation/integration
    '''        
    def __init__(self, polynomial_coeff: np.ndarray, order_of_derivative: int) -> None:
        '''
        Args:
            polynomial: [a_0, a_1, ..., a_n] representing a_0 + a_1*x +...+ a_n*x**n
        '''    
        self.original_coeff = polynomial_coeff
        self.number_of_terms = np.shape(polynomial_coeff)[0]
        self.order_of_terms = np.array([range(self.number_of_terms)])
        self.induced_coeff = np.ones((1, self.number_of_terms))
        self.computed_order_of_derivative = 0
        for _ in range(order_of_derivative):
            self.extend_derivatives()

    def get_lumped_coefficient(self, order_of_derivative: int, x: float):
        '''
        return [b_0*x**c_0 b_1*x**c_1 ... b_n*x**c_n]
        '''
        return self.induced_coeff[order_of_derivative]*(x**self.order_of_terms[order_of_derivative])

    def differantiate_polynomial(self, order_of_terms, order_of_derivative: int) -> tuple[np.ndarray, np.ndarray]:
        """take dirivative of a polynomial

        Args:
            order_of_derivative (int): -

        Returns:
            tuple[np.ndarray, np.ndarray]: _description_
        """
        new_order_of_terms = np.zeros(self.number_of_terms).astype(int)
        induced_coeffs = np.zeros(self.number_of_terms)
        if self.number_of_terms - order_of_derivative >= 0:
            for i, order in enumerate(order_of_terms):
                new_order_of_terms[i], induced_coeffs[i] = differantiate_monomial(order, order_of_derivative)
        return new_order_of_terms, induced_coeffs

    def get_differentiation_induced_coefficient(self, order_of_derivative: int) -> np.ndarray:
        induced_coeff_vector = np.zeros(self.number_of_terms)
        if self.number_of_terms - order_of_derivative >= 0:
            for i in range(order_of_derivative, self.number_of_terms, 1):
                new_order, coefficient = differantiate_monomial(i, order_of_derivative)
                induced_coeff_vector[new_order] = coefficient
        return induced_coeff_vector        

    def sample_polynomial(self, order_of_derivative: int, x: float) -> float:
        '''
        given polynomial and x, calculate sum(polynomial[i]*x^i)
        '''
        return self.get_lumped_coefficient(order_of_derivative, x)@self.original_coeff
    
    def extend_derivatives(self):
        '''
        increment the derivatives of the object
        '''
        new_order_of_terms, new_induced_coeff = self.differantiate_polynomial(self.order_of_terms[-1], 1)
        self.order_of_terms = np.vstack((self.order_of_terms, new_order_of_terms))
        self.induced_coeff = np.vstack((self.induced_coeff, self.induced_coeff[-1]*new_induced_coeff))
        self.computed_order_of_derivative += 1


def differantiate_monomial(order_of_monomial: int, order_of_derivative: int) -> tuple[int, int]:
    """calculate i^th order of t^n

    Args:
        order_of_monomial (int): n
        order_of_derivative (int): number of attempts to differantiate

    Returns:
        tuple[int, int]: differantiated_order, coefficient
        differantiated_order: order of monomial after differantiation
        coefficient: coefficient generated from differantiation
    """
    differantiated_order = 0
    coefficient = 0
    if order_of_derivative <= order_of_monomial:
        coefficient = np.prod(range(order_of_monomial, order_of_monomial - order_of_derivative, -1))
        differantiated_order = order_of_monomial - order_of_derivative
    return (differantiated_order, coefficient)


if __name__ == "__main__":

    # x^3 2th derivative to be 6x
    diff_order, coeff = differantiate_monomial(3, 2)
    print(diff_order, coeff)
    # x^3 3th derivative to be 6
    diff_order, coeff = differantiate_monomial(3, 3)
    print(diff_order, coeff)
    
    # 3+x+x^2+2*x^3 2nd derivative 0+0+2+12x
    polynomial_instance = Polynomial(np.array([3, 1, 1, 2]), 2)    
    print(polynomial_instance.order_of_terms)
    print(polynomial_instance.induced_coeff)
    print(polynomial_instance.computed_order_of_derivative)





